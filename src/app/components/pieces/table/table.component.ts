import { ChangeDetectionStrategy, Component, inject, type OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ThemeService } from '../../../services/theme.service';
import { ComponentPreviewComponent } from '../../component-preview/component-preview.component';
import { CodeSnippetPreviewComponent } from '../../code-snippet-preview/code-snippet-preview.component';

@Component({
  selector: 'app-table',
  standalone: true,
  imports: [
    CommonModule,
    ComponentPreviewComponent,
    CodeSnippetPreviewComponent
  ],
  templateUrl: './table.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class TableComponent implements OnInit {
  public themeService = inject(ThemeService);

  // Tab state management for NON-STRIPED example
  nonStripedTableActiveTab: 'preview' | 'code' = 'preview';

  setNonStripedActiveTab(tab: 'preview' | 'code'): void {
    this.nonStripedTableActiveTab = tab;
  }
  
  // Tab state management for STRIPED example
  stripedTableActiveTab: 'preview' | 'code' = 'preview';

  setStripedActiveTab(tab: 'preview' | 'code'): void {
    this.stripedTableActiveTab = tab;
  }

  // Tab state management for NON-STRIPED HOVER example
  nonStripedHoverTableActiveTab: 'preview' | 'code' = 'preview';

  setNonStripedHoverActiveTab(tab: 'preview' | 'code'): void {
    this.nonStripedHoverTableActiveTab = tab;
  }
  
  // Tab state management for STRIPED HOVER example
  stripedHoverTableActiveTab: 'preview' | 'code' = 'preview';

  setStripedHoverActiveTab(tab: 'preview' | 'code'): void {
    this.stripedHoverTableActiveTab = tab;
  }

  // Tab state management for STRIPED SELECTABLE example
  stripedSelectableTableActiveTab: 'preview' | 'code' = 'preview';

  setStripedSelectableActiveTab(tab: 'preview' | 'code'): void {
    this.stripedSelectableTableActiveTab = tab;
  }

  // Example data for the table (used by all)
  tableData = [
    { id: 1, name: 'Cy Ganderton', job: 'Quality Control Specialist', color: 'Blue' },
    { id: 2, name: 'Hart Hagerty', job: 'Desktop Support Technician', color: 'Purple' },
    { id: 3, name: 'Brice Swyre', job: 'Tax Accountant', color: 'Red' },
  ];

  // Selection state
  selectedRowIds = new Set<number>();

  ngOnInit(): void { }

  // --- Selection Logic ---
  toggleRowSelection(id: number): void {
    if (this.selectedRowIds.has(id)) {
      this.selectedRowIds.delete(id);
    } else {
      this.selectedRowIds.add(id);
    }
  }

  toggleSelectAll(): void {
    if (this.areAllSelected()) {
      this.selectedRowIds.clear();
    } else {
      this.tableData.forEach(row => this.selectedRowIds.add(row.id));
    }
  }

  isRowSelected(id: number): boolean {
    return this.selectedRowIds.has(id);
  }

  areAllSelected(): boolean {
    return this.selectedRowIds.size === this.tableData.length;
  }

  isAnySelected(): boolean {
    return this.selectedRowIds.size > 0 && this.selectedRowIds.size < this.tableData.length;
  }

  // --- Example Code Getters ---

  // Getter for NON-STRIPED table example code
  get nonStripedTableExampleCode(): string {
    const borderRadiusClass = this.themeService.getBorderRadiusClass();
    const shadowStyle = this.themeService.getShadowClassForElements();
    const primaryBgClass = this.themeService.getPrimaryBgClass();

    const tableHtml = `
<div class="overflow-x-auto border-neo-border border-black ${borderRadiusClass}" style="box-shadow: ${shadowStyle};">
  <table class="min-w-full bg-white">
    <thead class="${primaryBgClass} text-white font-medium">
      <tr>
        <th class="py-3 px-4 text-left">ID</th>
        <th class="py-3 px-4 text-left">Nombre</th>
        <th class="py-3 px-4 text-left">Puesto</th>
        <th class="py-3 px-4 text-left">Color Favorito</th>
      </tr>
    </thead>
    <tbody>
      <!-- Data rows generated by @for loop -->
      @for (row of tableData; track row.id) {
        <tr class="border-b border-black">
          <td class="py-3 px-4">{{ row.id }}</td>
          <td class="py-3 px-4">{{ row.name }}</td>
          <td class="py-3 px-4">{{ row.job }}</td>
          <td class="py-3 px-4">{{ row.color }}</td>
        </tr>
      }
    </tbody>
  </table>
</div>`;

    return this.escapeHtml(tableHtml.trim());
  }

  // Getter for STRIPED table example code
  get stripedTableExampleCode(): string {
    const borderRadiusClass = this.themeService.getBorderRadiusClass();
    const shadowStyle = this.themeService.getShadowClassForElements();
    const primaryBgClass = this.themeService.getPrimaryBgClass();
    const lightBgClass = this.themeService.getLightBgClass();

    const tableHtml = `
<div class="overflow-x-auto border-neo-border border-black ${borderRadiusClass}" style="box-shadow: ${shadowStyle};">
  <table class="min-w-full bg-white">
    <thead class="${primaryBgClass} text-white font-medium">
      <tr>
        <th class="py-3 px-4 text-left">ID</th>
        <th class="py-3 px-4 text-left">Nombre</th>
        <th class="py-3 px-4 text-left">Puesto</th>
        <th class="py-3 px-4 text-left">Color Favorito</th>
      </tr>
    </thead>
    <tbody>
      <!-- Data rows generated by @for loop -->
       @for (row of tableData; track row.id; let isEven = $even) {
        <tr class="border-b border-black" [ngClass]="isEven ? '${lightBgClass}' : ''">
          <td class="py-3 px-4">{{ row.id }}</td>
          <td class="py-3 px-4">{{ row.name }}</td>
          <td class="py-3 px-4">{{ row.job }}</td>
          <td class="py-3 px-4">{{ row.color }}</td>
        </tr>
      }
    </tbody>
  </table>
</div>`;

    return this.escapeHtml(tableHtml.trim());
  }

  // Getter for NON-STRIPED HOVER table example code
  get nonStripedHoverTableExampleCode(): string {
    const borderRadiusClass = this.themeService.getBorderRadiusClass();
    const shadowStyle = this.themeService.getShadowClassForElements();
    const primaryBgClass = this.themeService.getPrimaryBgClass();

    const tableHtml = `
<div class="overflow-x-auto border-neo-border border-black ${borderRadiusClass}" style="box-shadow: ${shadowStyle};">
  <table class="min-w-full bg-white">
    <thead class="${primaryBgClass} text-white font-medium">
      <tr>
        <th class="py-3 px-4 text-left">ID</th>
        <th class="py-3 px-4 text-left">Nombre</th>
        <th class="py-3 px-4 text-left">Puesto</th>
        <th class="py-3 px-4 text-left">Color Favorito</th>
      </tr>
    </thead>
    <tbody>
      <!-- Data rows generated by @for loop -->
      @for (row of tableData; track row.id) {
        <tr class="border-b border-black hover:bg-gray-100">
          <td class="py-3 px-4">{{ row.id }}</td>
          <td class="py-3 px-4">{{ row.name }}</td>
          <td class="py-3 px-4">{{ row.job }}</td>
          <td class="py-3 px-4">{{ row.color }}</td>
        </tr>
      }
    </tbody>
  </table>
</div>`;

    return this.escapeHtml(tableHtml.trim());
  }

  // Getter for STRIPED HOVER table example code
  get stripedHoverTableExampleCode(): string {
    const borderRadiusClass = this.themeService.getBorderRadiusClass();
    const shadowStyle = this.themeService.getShadowClassForElements();
    const primaryBgClass = this.themeService.getPrimaryBgClass();
    const lightBgClass = this.themeService.getLightBgClass();

    const tableHtml = `
<div class="overflow-x-auto border-neo-border border-black ${borderRadiusClass}" style="box-shadow: ${shadowStyle};">
  <table class="min-w-full bg-white">
    <thead class="${primaryBgClass} text-white font-medium">
      <tr>
        <th class="py-3 px-4 text-left">ID</th>
        <th class="py-3 px-4 text-left">Nombre</th>
        <th class="py-3 px-4 text-left">Puesto</th>
        <th class="py-3 px-4 text-left">Color Favorito</th>
      </tr>
    </thead>
    <tbody>
      <!-- Data rows generated by @for loop -->
       @for (row of tableData; track row.id; let isEven = $even) {
        <tr class="border-b border-black hover:bg-gray-100" [ngClass]="isEven ? '${lightBgClass}' : ''">
          <td class="py-3 px-4">{{ row.id }}</td>
          <td class="py-3 px-4">{{ row.name }}</td>
          <td class="py-3 px-4">{{ row.job }}</td>
          <td class="py-3 px-4">{{ row.color }}</td>
        </tr>
      }
    </tbody>
  </table>
</div>`;

    return this.escapeHtml(tableHtml.trim());
  }
  
  // Getter for STRIPED SELECTABLE table example code
  get stripedSelectableTableExampleCode(): string {
    const borderRadiusClass = this.themeService.getBorderRadiusClass();
    const shadowStyle = this.themeService.getShadowClassForElements();
    const primaryBgClass = this.themeService.getPrimaryBgClass();
    const lightBgClass = this.themeService.getLightBgClass();
    
    // Comment explaining the required TS logic
    const tsLogicComment = `
  export class YourComponent {
    tableData = [ /* your data */ ];
    selectedRowIds = new Set<number>();

    toggleRowSelection(id: number): void { /* Add/remove id from selectedRowIds */ }
    toggleSelectAll(): void { /* Add all ids or clear selectedRowIds */ }
    isRowSelected(id: number): boolean { /* return selectedRowIds.has(id); */ }
    areAllSelected(): boolean { /* return selectedRowIds.size === tableData.length; */ }
    isAnySelected(): boolean { /* return selectedRowIds.size > 0 && !areAllSelected(); */ }
  }
    `;

    const tableHtml = `
<div class="overflow-x-auto border-neo-border border-black ${borderRadiusClass}" style="box-shadow: ${shadowStyle};">
  <table class="min-w-full bg-white">
    <thead class="${primaryBgClass} text-white font-medium">
      <tr>
        <th class="py-3 px-4 text-left w-12">
          <input 
            type="checkbox"
            (change)="toggleSelectAll()"
            [checked]="areAllSelected()"
            [indeterminate]="isAnySelected()"
            class="form-checkbox h-5 w-5 text-blue-600 border-black focus:ring-blue-500"
          >
        </th>
        <th class="py-3 px-4 text-left">ID</th>
        <th class="py-3 px-4 text-left">Nombre</th>
        <th class="py-3 px-4 text-left">Puesto</th>
        <th class="py-3 px-4 text-left">Color Favorito</th>
      </tr>
    </thead>
    <tbody>
      <!-- Data rows generated by @for loop -->
       @for (row of tableData; track row.id; let isEven = $even) {
        <tr class="border-b border-black" [ngClass]="isEven ? '${lightBgClass}' : ''">
          <td class="py-3 px-4">
            <input 
              type="checkbox" 
              (change)="toggleRowSelection(row.id)"
              [checked]="isRowSelected(row.id)"
              class="form-checkbox h-5 w-5 text-blue-600 border-black focus:ring-blue-500"
            >
          </td>
          <td class="py-3 px-4">{{ row.id }}</td>
          <td class="py-3 px-4">{{ row.name }}</td>
          <td class="py-3 px-4">{{ row.job }}</td>
          <td class="py-3 px-4">{{ row.color }}</td>
        </tr>
      }
    </tbody>
  </table>
</div>`;

    return this.escapeHtml(tsLogicComment + tableHtml.trim());
  }

  private escapeHtml(unsafe: string): string {
    return unsafe
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');
  }
}
